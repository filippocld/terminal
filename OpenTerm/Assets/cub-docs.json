{"items":[{"rawDocumentation":"\/\/\/ The mathematical constant pi.","title":"pi","type":"variable","definition":"pi","variableDocumentation":{"description":"The mathematical constant pi."}},{"rawDocumentation":"\/\/\/ The mathematical constant tau, which equals 2*pi.","title":"tau","type":"variable","definition":"tau","variableDocumentation":{"description":"The mathematical constant tau, which equals 2*pi."}},{"type":"function","definition":"func abs(x) returns","title":"abs(x) returns"},{"type":"function","definition":"func min(a, b) returns","title":"min(a, b) returns"},{"type":"function","definition":"func max(a, b) returns","title":"max(a, b) returns"},{"type":"function","definition":"func isPositive(x) returns","title":"isPositive(x) returns"},{"type":"function","definition":"func isNegative(x) returns","title":"isNegative(x) returns"},{"type":"function","definition":"func isEven(x) returns","title":"isEven(x) returns"},{"type":"function","definition":"func isUneven(x) returns","title":"isUneven(x) returns"},{"functionDocumentation":{"argumentDescriptions":{},"arguments":["n","x"],"description":"Root `n` of `x`"},"rawDocumentation":"\/\/\/ Root `n` of `x`","title":"root(n, x) returns","type":"function","definition":"func root(n, x) returns"},{"functionDocumentation":{"argumentDescriptions":{},"arguments":["x"],"description":"Square root of `x`"},"rawDocumentation":"\/\/\/ Square root of `x`","title":"sqrt(x) returns","type":"function","definition":"func sqrt(x) returns"},{"functionDocumentation":{"argumentDescriptions":{},"arguments":["x"],"description":"Cube root of `x`"},"rawDocumentation":"\/\/\/ Cube root of `x`","title":"cbrt(x) returns","type":"function","definition":"func cbrt(x) returns"},{"functionDocumentation":{"argumentDescriptions":{},"arguments":["x","y"],"description":"x is dividend\ny is divisor\nreturns remainder"},"rawDocumentation":"\/\/\/ x is dividend\n\/\/\/ y is divisor\n\/\/\/ returns remainder","title":"rem(x, y) returns","type":"function","definition":"func rem(x, y) returns"},{"functionDocumentation":{"returnDescription":"modulus","arguments":["x","y"],"argumentDescriptions":{"y":"divisor","x":"dividend"}},"rawDocumentation":"\/\/\/ - Parameter x: dividend\n\/\/\/ - Parameter y: divisor\n\/\/\/ - Returns: modulus","title":"mod(x, y) returns","type":"function","definition":"func mod(x, y) returns"},{"type":"function","definition":"func floor(x) returns","title":"floor(x) returns"},{"type":"function","definition":"func round(x) returns","title":"round(x) returns"},{"rawDocumentation":"\/\/\/ A struct that stores color data in RGBA.\n\/\/\/ - r: the red component, in range 0...1\n\/\/\/ - g: the green component, in range 0...1\n\/\/\/ - b: the blue component, in range 0...1\n\/\/\/ - a: the alpha component, in range 0...1","title":"Color(r, g, b, a)","type":"struct","definition":"struct Color(r, g, b, a)","structDocumentation":{"members":["r","g","b","a"],"memberDescriptions":{"r":"the red component, in range 0...1","b":"the blue component, in range 0...1","g":"the green component, in range 0...1","a":"the alpha component, in range 0...1"},"description":"A struct that stores color data in RGBA."}},{"functionDocumentation":{"argumentDescriptions":{},"arguments":["r","g","b"],"description":"Color convenience init."},"rawDocumentation":"\/\/\/ Color convenience init.","title":"rgb(r, g, b) returns","type":"function","definition":"func rgb(r, g, b) returns"},{"functionDocumentation":{"argumentDescriptions":{},"arguments":["r","g","b","a"],"description":"Color convenience init."},"rawDocumentation":"\/\/\/ Color convenience init.","title":"rgba(r, g, b, a) returns","type":"function","definition":"func rgba(r, g, b, a) returns"},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 1.0, 0.0, and 0.0 and whose alpha value is 1.0.","title":"red","type":"variable","definition":"red","variableDocumentation":{"description":"A color value whose RGB values are 1.0, 0.0, and 0.0 and whose alpha value is 1.0."}},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 0.0, 1.0, and 0.0 and whose alpha value is 1.0.","title":"green","type":"variable","definition":"green","variableDocumentation":{"description":"A color value whose RGB values are 0.0, 1.0, and 0.0 and whose alpha value is 1.0."}},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 0.0, 0.0, and 1.0 and whose alpha value is 1.0.","title":"blue","type":"variable","definition":"blue","variableDocumentation":{"description":"A color value whose RGB values are 0.0, 0.0, and 1.0 and whose alpha value is 1.0."}},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 0.0, 1.0, and 1.0 and whose alpha value is 1.0.","title":"cyan","type":"variable","definition":"cyan","variableDocumentation":{"description":"A color value whose RGB values are 0.0, 1.0, and 1.0 and whose alpha value is 1.0."}},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 1.0, 0.0, and 1.0 and whose alpha value is 1.0.","title":"magenta","type":"variable","definition":"magenta","variableDocumentation":{"description":"A color value whose RGB values are 1.0, 0.0, and 1.0 and whose alpha value is 1.0."}},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 1.0, 1.0, and 0.0 and whose alpha value is 1.0.","title":"yellow","type":"variable","definition":"yellow","variableDocumentation":{"description":"A color value whose RGB values are 1.0, 1.0, and 0.0 and whose alpha value is 1.0."}},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 0.0, 0.0, and 0.0 and whose alpha value is 1.0.","title":"black","type":"variable","definition":"black","variableDocumentation":{"description":"A color value whose RGB values are 0.0, 0.0, and 0.0 and whose alpha value is 1.0."}},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 1.0, 1.0, and 1.0 and whose alpha value is 1.0.","title":"white","type":"variable","definition":"white","variableDocumentation":{"description":"A color value whose RGB values are 1.0, 1.0, and 1.0 and whose alpha value is 1.0."}},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 0.0, 0.0, and 0.0 and whose alpha value is 0.0.","title":"clear","type":"variable","definition":"clear","variableDocumentation":{"description":"A color value whose RGB values are 0.0, 0.0, and 0.0 and whose alpha value is 0.0."}},{"functionDocumentation":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a struct, false otherwise.","description":"Checks if the value is a struct."},"rawDocumentation":"Checks if the value is a struct.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a struct, false otherwise.","title":"isStruct(value) returns","type":"function","definition":"func isStruct(value) returns"},{"functionDocumentation":{"arguments":["dateString","format"],"argumentDescriptions":{"format":"the format that the given date string is in.","dateString":"a date in a string format."},"returnDescription":"a date.","description":"Get a date (represented as a number), from a string in a specified format.\nExample:\nmyDate = dateFromFormat(\"2012-02-20\", \"yyyy-MM-dd\")"},"rawDocumentation":"Get a date (represented as a number), from a string in a specified format.\n\nExample:\nmyDate = dateFromFormat(\"2012-02-20\", \"yyyy-MM-dd\")\n\n- Parameter dateString: a date in a string format.\n- Parameter format: the format that the given date string is in.\n- Returns: a date.","title":"dateFromFormat(dateString, format) returns","type":"function","definition":"func dateFromFormat(dateString, format) returns"},{"functionDocumentation":{"arguments":["date","format"],"argumentDescriptions":{"date":"a number representing a date.","format":"the format to get the date in."},"returnDescription":"a string of the given date, formatted.","description":"Get a formatted date (a string) from a date (represented as a number) in a specified format.\nExample:\nmyDate = currentDate()\nmyDateString = formattedDate(myDate, \"yyyy-MM-dd\")"},"rawDocumentation":"Get a formatted date (a string) from a date (represented as a number) in a specified format.\n\nExample:\nmyDate = currentDate()\nmyDateString = formattedDate(myDate, \"yyyy-MM-dd\")\n\n- Parameter date: a number representing a date.\n- Parameter format: the format to get the date in.\n- Returns: a string of the given date, formatted.","title":"formattedDate(date, format) returns","type":"function","definition":"func formattedDate(date, format) returns"},{"type":"function","definition":"func readLine() returns","title":"readLine() returns"},{"functionDocumentation":{"arguments":["command"],"argumentDescriptions":{"command":"The command to execute."},"returnDescription":"the exit code, 0 means no error.","description":"Execute a shell command in the shell that the script is executed from."},"rawDocumentation":"Execute a shell command in the shell that the script is executed from.\n- Parameter command: The command to execute.\n- Returns: the exit code, 0 means no error.","title":"shell(command) returns","type":"function","definition":"func shell(command) returns"},{"functionDocumentation":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is an array, false otherwise.","description":"Checks if the value is an array."},"rawDocumentation":"Checks if the value is an array.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is an array, false otherwise.","title":"isArray(value) returns","type":"function","definition":"func isArray(value) returns"},{"functionDocumentation":{"arguments":["min","max"],"argumentDescriptions":{"min":"minimum number.","max":"maximum number."},"returnDescription":"a random number.","description":"Get a random number.\nExample:\nmyDiceRoll = randomNumber(1, 6)"},"rawDocumentation":"Get a random number.\n\nExample:\nmyDiceRoll = randomNumber(1, 6)\n\n- Parameter min: minimum number.\n- Parameter max: maximum number.\n- Returns: a random number.","title":"randomNumber(min, max) returns","type":"function","definition":"func randomNumber(min, max) returns"},{"functionDocumentation":{"arguments":["input","arg"],"argumentDescriptions":{"input":"a string template.","arg":"the argument to insert in the template."},"returnDescription":"a formatted string.","description":"Get a formatted string with an argument.\nExample:\nformattedNumber = format(\"%.f\", 1.0) \/\/ \"1\""},"rawDocumentation":"Get a formatted string with an argument.\n\nExample:\nformattedNumber = format(\"%.f\", 1.0) \/\/ \"1\"\n\n- Parameter input: a string template.\n- Parameter arg: the argument to insert in the template.\n- Returns: a formatted string.","title":"format(input, arg) returns","type":"function","definition":"func format(input, arg) returns"},{"type":"function","definition":"func readNumber() returns","title":"readNumber() returns"},{"functionDocumentation":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a string, false otherwise.","description":"Checks if the value is a string."},"rawDocumentation":"Checks if the value is a string.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a string, false otherwise.","title":"isString(value) returns","type":"function","definition":"func isString(value) returns"},{"functionDocumentation":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a boolean, false otherwise.","description":"Checks if the value is a boolean."},"rawDocumentation":"Checks if the value is a boolean.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a boolean, false otherwise.","title":"isBool(value) returns","type":"function","definition":"func isBool(value) returns"},{"functionDocumentation":{"arguments":["value","unit","date"],"argumentDescriptions":{"date":"a number that represents a date.","value":"the number that you want to add to the given date, in the given unit.","unit":"a string that represents a date unit. One of the following values: \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\""},"returnDescription":"a number representing the given date, having added the value in the specified unit.","description":"Add a specific amount of a date unit to a given date.\nExample:\nmyDate = currentDate()\ntomorrowThisTime = dateByAdding(1, \"day\", myDate)"},"rawDocumentation":"Add a specific amount of a date unit to a given date.\n\nExample:\nmyDate = currentDate()\ntomorrowThisTime = dateByAdding(1, \"day\", myDate)\n\n- Parameter value: the number that you want to add to the given date, in the given unit.\n- Parameter unit: a string that represents a date unit. One of the following values: \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\"\n- Parameter date: a number that represents a date.\n- Returns: a number representing the given date, having added the value in the specified unit.","title":"dateByAdding(value, unit, date) returns","type":"function","definition":"func dateByAdding(value, unit, date) returns"},{"functionDocumentation":{"arguments":[],"argumentDescriptions":{},"returnDescription":"a number representing the current date and time.","description":"Get the current date and time, represented as a number."},"rawDocumentation":"Get the current date and time, represented as a number.\n- Returns: a number representing the current date and time.","title":"currentDate() returns","type":"function","definition":"func currentDate() returns"},{"functionDocumentation":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a number, false otherwise.","description":"Checks if the value is a number."},"rawDocumentation":"Checks if the value is a number.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a number, false otherwise.","title":"isNumber(value) returns","type":"function","definition":"func isNumber(value) returns"},{"type":"function","definition":"func print(input) returns","title":"print(input) returns"}]}
